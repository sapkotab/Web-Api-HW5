{
	"id": "160ee737-181c-efa1-ec6b-f2d79fafa816",
	"name": "hw5",
	"description": "",
	"order": [
		"16d75d70-ab65-811d-a27b-05cabed55bbc",
		"c3d7bf0b-ddab-e8a0-968f-ded98f27f447",
		"633d1a3d-961a-9e68-0f80-9db31d931957",
		"86451c6e-b8dc-087e-8239-2f133814c4c8",
		"8e0b26e5-a2c9-525f-deea-83d5e59671cc",
		"9346e873-ef75-4d3f-dc34-8d22f4ef147b",
		"c9a2d1d0-1274-2f2e-1391-17b6fee55356",
		"733f546f-6e41-3d73-b1b2-0411365bdeab",
		"68aeba40-459c-ac7d-6eed-abc447123dc2",
		"7f67c277-7a81-0cc7-6884-bdb77e54ddbf",
		"dd48879b-4f6f-5ae5-4903-45e8dfb7919c",
		"00116bb4-b51c-a274-9aca-6f4a8fc82502",
		"d17dd82e-14a8-1b74-2bf8-de619abc83b0",
		"53d92c30-d3a2-439a-a213-2fcc93df3f00",
		"77cc8ab4-08f8-820f-857e-e46ce950d06d",
		"11c8cdaf-693a-b3be-7c56-5a1d40b72a53",
		"c6379fcb-d0e5-0aab-f5e9-612d9d983265",
		"b5e2e995-d708-533f-5625-775c44e371fa",
		"21c7c37b-d361-d8e6-0f06-e50a9a9d148c",
		"84ee6b82-7f53-744e-de2c-2f3d768bd8ca",
		"5cc583f9-03be-f330-1ccf-bf6c2320fdae"
	],
	"folders": [],
	"timestamp": 1492435164819,
	"owner": "1497785",
	"public": false,
	"requests": [
		{
			"id": "00116bb4-b51c-a274-9aca-6f4a8fc82502",
			"headers": "",
			"url": "http://brsapkota-test.apigee.net/hw5/movie",
			"pathVariables": {},
			"preRequestScript": null,
			"method": "DELETE",
			"collectionId": "160ee737-181c-efa1-ec6b-f2d79fafa816",
			"data": [],
			"dataMode": "raw",
			"name": "bulk movie delete",
			"description": "put shouldn't be allowed withoug Title specification",
			"descriptionFormat": "html",
			"time": 1492436933094,
			"version": 2,
			"responses": [],
			"tests": "tests[\"Status code is 405\"] = responseCode.code === 405;\n\n\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"rawModeData": ""
		},
		{
			"id": "11c8cdaf-693a-b3be-7c56-5a1d40b72a53",
			"headers": "",
			"url": "http://brsapkota-test.apigee.net/movieCollection/movie/invalid title",
			"pathVariables": {},
			"preRequestScript": "postman.setGlobalVariable(\"invalidMovieTitle\", \"invalidMovie\");",
			"method": "GET",
			"collectionId": "160ee737-181c-efa1-ec6b-f2d79fafa816",
			"data": [],
			"dataMode": "raw",
			"name": "get movie  with invalid title",
			"description": "no movie is found should be displayed and test should pass",
			"descriptionFormat": "html",
			"time": 1492437592892,
			"version": 2,
			"responses": [],
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\n\n\nvar jsonData = JSON.parse(responseBody);\ntests[\"need error\"] = jsonData.message.has(\"No such movie is found\");",
			"currentHelper": "normal",
			"helperAttributes": {},
			"rawModeData": ""
		},
		{
			"id": "16d75d70-ab65-811d-a27b-05cabed55bbc",
			"headers": "",
			"url": "http://brsapkota-test.apigee.net/hw5/movie",
			"pathVariables": {},
			"preRequestScript": null,
			"method": "GET",
			"collectionId": "160ee737-181c-efa1-ec6b-f2d79fafa816",
			"data": null,
			"dataMode": "params",
			"name": "get movies with GET without review query",
			"description": "get operation without should show all movies in database without any query. and schema validation test shoud pass.",
			"descriptionFormat": "html",
			"time": 1492435164818,
			"version": 2,
			"responses": [],
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\n\n\nvar schema = \n{\"object\":{\n    \"type\": \"array\",\n    \"items\": {\n        \"$ref\": \"#/definitions/MyObject\"\n    },\n\n    \"definitions\": {\n        \"MyObject\": {\n            \"type\": \"object\",\n            \"required\": [\"Title\", \"YearReleased\", \"Actors\"],\n            \"properties\": {\n                \"Title\": {\n                    \"type\": \"string\"\n                },\n                \"YearReleased\": {\n                    \"type\": \"number\"\n                },\n                \"Actors\": {\n                    \"type\": \"object\"\n                },\n            },\n            \"additionalProperties\": false\n        }\n    }\n}\n};\n\nvar jsonData = JSON.parse(responseBody);\nvar result = tv4.validateResult(data, schema);\ntests[\"Valid schema\"] = result.valid;",
			"currentHelper": "normal",
			"helperAttributes": {}
		},
		{
			"id": "21c7c37b-d361-d8e6-0f06-e50a9a9d148c",
			"headers": "Content-Type: application/json\n",
			"url": "http://brsapkota-test.apigee.net/hw5/movie/Zootopia",
			"pathVariables": {},
			"preRequestScript": null,
			"method": "POST",
			"collectionId": "160ee737-181c-efa1-ec6b-f2d79fafa816",
			"data": [],
			"dataMode": "raw",
			"name": "Post  movie with movie  title specification",
			"description": "post shouldn't be allowed with title specifiaction.\nshould return error ",
			"descriptionFormat": "html",
			"time": 1492437817464,
			"version": 2,
			"responses": [],
			"tests": "tests[\"Status code is 405\"] = responseCode.code === 405;\n\n\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"rawModeData": ""
		},
		{
			"id": "53d92c30-d3a2-439a-a213-2fcc93df3f00",
			"headers": "",
			"url": "http://brsapkota-test.apigee.net/hw5/movie/Zootopia?review=false",
			"pathVariables": {},
			"preRequestScript": "postman.setGlobalVariable(\"AddedMovieTitle\", \"Zootopia\");",
			"method": "GET",
			"collectionId": "160ee737-181c-efa1-ec6b-f2d79fafa816",
			"data": [],
			"dataMode": "raw",
			"name": "get movie with valid title with query review is false",
			"description": "only titled movie should show up in body without review. we test the title is correct.",
			"descriptionFormat": "html",
			"time": 1492437269838,
			"version": 2,
			"responses": [],
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\n\n\nvar jsonData = JSON.parse(responseBody);\ntests[\"Title matched\"] = jsonData.Movie[0].Title.has(\"Zootopia\");",
			"currentHelper": "normal",
			"helperAttributes": {},
			"rawModeData": ""
		},
		{
			"id": "5cc583f9-03be-f330-1ccf-bf6c2320fdae",
			"headers": "Content-Type: application/x-www-form-urlencoded\n",
			"url": "http://brsapkota-test.apigee.net/movieCollection/movie/Zootopia",
			"pathVariables": {},
			"preRequestScript": null,
			"method": "DELETE",
			"collectionId": "160ee737-181c-efa1-ec6b-f2d79fafa816",
			"data": [],
			"dataMode": "urlencoded",
			"name": "delete movie with title just deleted",
			"description": "should return the message \"movie doesn't exist\"",
			"descriptionFormat": "html",
			"time": 1492437878478,
			"version": 2,
			"responses": [],
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\n\nvar jsonData = JSON.parse(responseBody);\n\ntests[\"Success message\"] = responseBody.has(\"No such movie is found\");",
			"currentHelper": "normal",
			"helperAttributes": {}
		},
		{
			"id": "633d1a3d-961a-9e68-0f80-9db31d931957",
			"headers": "",
			"url": "http://brsapkota-test.apigee.net/hw5/movie?review=true",
			"pathVariables": {},
			"preRequestScript": null,
			"method": "GET",
			"collectionId": "160ee737-181c-efa1-ec6b-f2d79fafa816",
			"data": null,
			"dataMode": "params",
			"name": "get movies with GET with review query true",
			"description": "get operation without should show all movies in database with any review associated with it and schema validation test shoud pass.",
			"descriptionFormat": "html",
			"time": 1492435508494,
			"version": 2,
			"responses": [],
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\n\n\nvar schema = \n{\"object\":{\n    \"type\": \"array\",\n    \"items\": {\n        \"$ref\": \"#/definitions/MyObject\"\n    },\n\n    \"definitions\": {\n        \"MyObject\": {\n            \"type\": \"object\",\n            \"required\": [\"Title\", \"YearReleased\", \"Actors\",\"review\"],\n            \"properties\": {\n                \"Title\": {\n                    \"type\": \"string\"\n                },\n                \"YearReleased\": {\n                    \"type\": \"number\"\n                },\n                \"Actors\": {\n                    \"type\": \"object\"\n                },\n                \"review\": {\n                    \"type\": \"object\"\n                },\n            },\n            \"additionalProperties\": false\n        }\n    }\n}\n};\n\nvar jsonData = JSON.parse(responseBody);\nvar result = tv4.validateResult(data, schema);\ntests[\"Valid schema\"] = result.valid;",
			"currentHelper": "normal",
			"helperAttributes": {}
		},
		{
			"id": "68aeba40-459c-ac7d-6eed-abc447123dc2",
			"headers": "",
			"url": "http://brsapkota-test.apigee.net/hw5/movie",
			"pathVariables": {},
			"preRequestScript": null,
			"method": "POST",
			"collectionId": "160ee737-181c-efa1-ec6b-f2d79fafa816",
			"data": null,
			"dataMode": "params",
			"name": "post movie  without body",
			"description": "should return as a bad request",
			"descriptionFormat": "html",
			"time": 1492436758368,
			"version": 2,
			"responses": [],
			"tests": "tests[\"bad request\"] = responseCode.code === 400;",
			"currentHelper": "normal",
			"helperAttributes": {}
		},
		{
			"id": "733f546f-6e41-3d73-b1b2-0411365bdeab",
			"headers": "Content-Type: application/json\n",
			"url": "http://brsapkota-test.apigee.net/hw5/movie",
			"pathVariables": {},
			"preRequestScript": null,
			"method": "POST",
			"collectionId": "160ee737-181c-efa1-ec6b-f2d79fafa816",
			"data": [],
			"dataMode": "raw",
			"name": "post movie with existing movie",
			"description": "post operation should display movie already exist to user. movie exist test should pass",
			"descriptionFormat": "html",
			"time": 1492436705524,
			"version": 2,
			"responses": [],
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\n\nvar jsonData = JSON.parse(responseBody);\n\ntests[\"alredy exist message\"] = responseBody.has(\"Movie already exist\");\n\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"rawModeData": "{\n  \"Title\": \"Zootopia\",\n  \"YearReleased\": 2016,\n  \"Actors\": [\n        {\n          \"Name\": \"Ginnifer Goodwin\"\n        },\n        {\n          \"Name\": \"Jason Bateman\"\n        },\n        {\n          \"Name\": \"Idris Elba\"\n        }\n\t]\n}"
		},
		{
			"id": "77cc8ab4-08f8-820f-857e-e46ce950d06d",
			"headers": "",
			"url": "http://brsapkota-test.apigee.net/hw5/movie/Zootopia?review=true",
			"pathVariables": {},
			"preRequestScript": "postman.setGlobalVariable(\"AddedMovieTitle\", \"Zootopia\");",
			"method": "GET",
			"collectionId": "160ee737-181c-efa1-ec6b-f2d79fafa816",
			"data": [],
			"dataMode": "raw",
			"name": "get movie with valid title with query review is true",
			"description": "only titled movie with any associated reviews should show up in body. we test the title is correct and review exist in body",
			"descriptionFormat": "html",
			"time": 1492437437216,
			"version": 2,
			"responses": [],
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\n\n\nvar jsonData = JSON.parse(responseBody);\ntests[\"Title matched\"] = jsonData.Movie[0].Title.has(\"Zootopia\");\ntests[\"review included\"] = jsonData.Movie[0].review[0].movie.has(\"Zootopia\");",
			"currentHelper": "normal",
			"helperAttributes": {},
			"rawModeData": ""
		},
		{
			"id": "7f67c277-7a81-0cc7-6884-bdb77e54ddbf",
			"headers": "",
			"url": "http://brsapkota-test.apigee.net/hw5/review",
			"pathVariables": {},
			"preRequestScript": null,
			"method": "POST",
			"collectionId": "160ee737-181c-efa1-ec6b-f2d79fafa816",
			"data": null,
			"dataMode": "params",
			"name": "post review without body",
			"description": "should return as a bad request",
			"descriptionFormat": "html",
			"time": 1492436790297,
			"version": 2,
			"responses": [],
			"tests": "tests[\"bad request\"] = responseCode.code === 400;",
			"currentHelper": "normal",
			"helperAttributes": {}
		},
		{
			"id": "84ee6b82-7f53-744e-de2c-2f3d768bd8ca",
			"headers": "Content-Type: application/x-www-form-urlencoded\n",
			"url": "http://brsapkota-test.apigee.net/movieCollection/movie/Zootopia",
			"pathVariables": {},
			"preRequestScript": null,
			"method": "DELETE",
			"collectionId": "160ee737-181c-efa1-ec6b-f2d79fafa816",
			"data": [],
			"dataMode": "urlencoded",
			"name": "delete movie with valid title",
			"description": "should delete movie from database",
			"descriptionFormat": "html",
			"time": 1492437853818,
			"version": 2,
			"responses": [],
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\n\nvar jsonData = JSON.parse(responseBody);\n\ntests[\"Success message\"] = responseBody.has(\"Movie successfully deleted\");",
			"currentHelper": "normal",
			"helperAttributes": {}
		},
		{
			"id": "86451c6e-b8dc-087e-8239-2f133814c4c8",
			"headers": "Content-Type: application/json\n",
			"url": "http://brsapkota-test.apigee.net/hw5/movie",
			"pathVariables": {},
			"preRequestScript": null,
			"method": "POST",
			"collectionId": "160ee737-181c-efa1-ec6b-f2d79fafa816",
			"data": [],
			"dataMode": "raw",
			"name": "post movie  with valid body",
			"description": "post operation should save movie in database. success test should pass. we will validate this movie actually exist in database by get by this Title operation.",
			"descriptionFormat": "html",
			"time": 1492435768627,
			"version": 2,
			"responses": [],
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\n\nvar jsonData = JSON.parse(responseBody);\n\ntests[\"Success message\"] = responseBody.has(\"successfully added\");",
			"currentHelper": "normal",
			"helperAttributes": {},
			"rawModeData": "{\n    \"Title\": \"Zootopia\",\n    \"YearReleased\": 2016,\n    \"Actors\": [\n        {\n            \"Name\": \"Ginnifer Goodwin\"\n        },\n        {\n            \"Name\": \"Jason Bateman\"\n        },\n        {\n            \"Name\": \"Idris Elba\"\n        }\n    ]\n}"
		},
		{
			"id": "8e0b26e5-a2c9-525f-deea-83d5e59671cc",
			"headers": "Content-Type: application/json\n",
			"url": "http://brsapkota-test.apigee.net/hw5/review",
			"pathVariables": {},
			"preRequestScript": null,
			"method": "POST",
			"collectionId": "160ee737-181c-efa1-ec6b-f2d79fafa816",
			"data": [],
			"dataMode": "raw",
			"name": "post review  with valid movie",
			"description": "post operation should save review in database. success test should pass. we will validate this review actually exist in database by get all reviews.",
			"descriptionFormat": "html",
			"time": 1492436056121,
			"version": 2,
			"responses": [],
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\n\nvar jsonData = JSON.parse(responseBody);\n\ntests[\"Success message\"] = responseBody.has(\"successfully added\");",
			"currentHelper": "normal",
			"helperAttributes": {},
			"rawModeData": "{\n    \"movie\": \"Zootopia\",\n    \"reviewer\": \"Christopher Orr\",\n    \"rating\": 4,\n    \"text\": \"The film that unfolds from these beginnings is in many ways a conventional one, but it unfolds with so much wit, panache, and visual ingenuity that it outstrips many a more high-concept movie.\"\n}"
		},
		{
			"id": "9346e873-ef75-4d3f-dc34-8d22f4ef147b",
			"headers": "Content-Type: application/json\n",
			"url": "http://brsapkota-test.apigee.net/hw5/review",
			"pathVariables": {},
			"preRequestScript": null,
			"method": "POST",
			"collectionId": "160ee737-181c-efa1-ec6b-f2d79fafa816",
			"data": [],
			"dataMode": "raw",
			"name": "post review  with invalid movie title",
			"description": "post operation should return the error telling movie doesn't exist. error message test should pass",
			"descriptionFormat": "html",
			"time": 1492436297870,
			"version": 2,
			"responses": [],
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\n\nvar jsonData = JSON.parse(responseBody);\n\ntests[\"Success message\"] = responseBody.has(\"Movie does not exist\");",
			"currentHelper": "normal",
			"helperAttributes": {},
			"rawModeData": "{\n    \"movie\": \"invalidmovie\",\n    \"reviewer\": \"Christopher Orr\",\n    \"rating\": 4,\n    \"text\": \"The film that unfolds from these beginnings is in many ways a conventional one, but it unfolds with so much wit, panache, and visual ingenuity that it outstrips many a more high-concept movie.\"\n}"
		},
		{
			"id": "b5e2e995-d708-533f-5625-775c44e371fa",
			"headers": "Content-Type: application/json\n",
			"url": "http://brsapkota-test.apigee.net/hw5/movie/Zootopia",
			"pathVariables": {},
			"preRequestScript": null,
			"method": "PUT",
			"collectionId": "160ee737-181c-efa1-ec6b-f2d79fafa816",
			"data": [],
			"dataMode": "raw",
			"name": "put movie with only array of actors",
			"description": "should update only array of actors. ",
			"descriptionFormat": "html",
			"time": 1492437745645,
			"version": 2,
			"responses": [],
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar jsonData = JSON.parse(responseBody);\ntests[\"success message\"] = responseBody.has(\"Movie is updated\");\n\n\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"rawModeData": "{\n    \"Actors\": [\n        {\n            \"Name\": \"Bhuwan Sapkota\"\n        },\n        {\n            \"Name\": \"Christi mainali\"\n        },\n        {\n            \"Name\": \"Maya Baral\"\n        }\n    ]\n}"
		},
		{
			"id": "c3d7bf0b-ddab-e8a0-968f-ded98f27f447",
			"headers": "",
			"url": "http://brsapkota-test.apigee.net/hw5/movie?review=false",
			"pathVariables": {},
			"preRequestScript": null,
			"method": "GET",
			"collectionId": "160ee737-181c-efa1-ec6b-f2d79fafa816",
			"data": null,
			"dataMode": "params",
			"name": "get movies with GET with review query false",
			"description": "get operation without should show all movies in database without any review. and schema validation test shoud pass.",
			"descriptionFormat": "html",
			"time": 1492435345164,
			"version": 2,
			"responses": [],
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\n\n\nvar schema = \n{\"object\":{\n    \"type\": \"array\",\n    \"items\": {\n        \"$ref\": \"#/definitions/MyObject\"\n    },\n\n    \"definitions\": {\n        \"MyObject\": {\n            \"type\": \"object\",\n            \"required\": [\"Title\", \"YearReleased\", \"Actors\"],\n            \"properties\": {\n                \"Title\": {\n                    \"type\": \"string\"\n                },\n                \"YearReleased\": {\n                    \"type\": \"number\"\n                },\n                \"Actors\": {\n                    \"type\": \"object\"\n                },\n            },\n            \"additionalProperties\": false\n        }\n    }\n}\n};\n\nvar jsonData = JSON.parse(responseBody);\nvar result = tv4.validateResult(data, schema);\ntests[\"Valid schema\"] = result.valid;",
			"currentHelper": "normal",
			"helperAttributes": {}
		},
		{
			"id": "c6379fcb-d0e5-0aab-f5e9-612d9d983265",
			"headers": "Content-Type: application/json\n",
			"url": "http://brsapkota-test.apigee.net/hw5/movie/Zootopia",
			"pathVariables": {},
			"preRequestScript": null,
			"method": "PUT",
			"collectionId": "160ee737-181c-efa1-ec6b-f2d79fafa816",
			"data": [],
			"dataMode": "raw",
			"name": "put movie with only year change",
			"description": "should update only year. ",
			"descriptionFormat": "html",
			"time": 1492437691910,
			"version": 2,
			"responses": [],
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar jsonData = JSON.parse(responseBody);\ntests[\"success message\"] = responseBody.has(\"Movie is updated\");\n\n\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"rawModeData": "{\n    \"YearReleased\": 2000\n}"
		},
		{
			"id": "c9a2d1d0-1274-2f2e-1391-17b6fee55356",
			"headers": "",
			"url": "http://brsapkota-test.apigee.net/hw5/review",
			"pathVariables": {},
			"preRequestScript": null,
			"method": "GET",
			"collectionId": "160ee737-181c-efa1-ec6b-f2d79fafa816",
			"data": null,
			"dataMode": "params",
			"name": "get reviews with GET ",
			"description": "get operation should show all reviews in database. and schema validation test shoud pass.",
			"descriptionFormat": "html",
			"time": 1492436582340,
			"version": 2,
			"responses": [],
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\n\n\nvar schema = \n{\"object\":{\n    \"type\": \"array\",\n    \"items\": {\n        \"$ref\": \"#/definitions/MyObject\"\n    },\n\n    \"definitions\": {\n        \"MyObject\": {\n            \"type\": \"object\",\n            \"required\": [\"movie\",\"reviewer\",\"rating\",\"text\"],\n            \"properties\": {\n                \"movie\": {\n                    \"type\": \"string\"\n                },\n                \"reviewer\": {\n                    \"type\": \"number\"\n                },\n                \"rating\": {\n                    \"type\": \"object\"\n                },\n                  \"text\": {\n                    \"type\": \"object\"\n                },\n            },\n            \"additionalProperties\": false\n        }\n    }\n}\n};\n\nvar jsonData = JSON.parse(responseBody);\nvar result = tv4.validateResult(data, schema);\ntests[\"Valid schema\"] = result.valid;",
			"currentHelper": "normal",
			"helperAttributes": {}
		},
		{
			"id": "d17dd82e-14a8-1b74-2bf8-de619abc83b0",
			"headers": "",
			"url": "http://brsapkota-test.apigee.net/hw5/movie/Zootopia",
			"pathVariables": {},
			"preRequestScript": "postman.setGlobalVariable(\"AddedMovieTitle\", \"Zootopia\");",
			"method": "GET",
			"collectionId": "160ee737-181c-efa1-ec6b-f2d79fafa816",
			"data": [],
			"dataMode": "raw",
			"name": "get movie with valid title without query",
			"description": "only titled movie should show up in body. we test the title is correct.",
			"descriptionFormat": "html",
			"time": 1492437114700,
			"version": 2,
			"responses": [],
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\n\n\nvar jsonData = JSON.parse(responseBody);\ntests[\"Title matched\"] = jsonData.Movie[0].Title.has(\"Zootopia\");",
			"currentHelper": "normal",
			"helperAttributes": {},
			"rawModeData": ""
		},
		{
			"id": "dd48879b-4f6f-5ae5-4903-45e8dfb7919c",
			"headers": "",
			"url": "http://brsapkota-test.apigee.net/hw5/movie",
			"pathVariables": {},
			"preRequestScript": null,
			"method": "PUT",
			"collectionId": "160ee737-181c-efa1-ec6b-f2d79fafa816",
			"data": [],
			"dataMode": "raw",
			"name": "bulk movie put with PUT",
			"description": "put shouldn't be allowed without Title specification",
			"descriptionFormat": "html",
			"time": 1492436853341,
			"version": 2,
			"responses": [],
			"tests": "tests[\"Status code is 405\"] = responseCode.code === 405;\n\n\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"rawModeData": ""
		}
	]
}